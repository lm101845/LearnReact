{"version":3,"sources":["components/08_ErrorBoundary/Child.jsx","components/08_ErrorBoundary/Parent.jsx","App.jsx","index.js"],"names":["Child","state","users","this","map","userObj","name","age","id","Component","Parent","hasError","console","log","error","App","ReactDOM","render","document","getElementById"],"mappings":"yLAEqBA,E,4MACjBC,MAAQ,CAUJC,MAAO,O,4CAGX,WACI,OACI,gCACI,+DAEIC,KAAKF,MAAMC,MAAME,KAAI,SAACC,GAClB,OAAO,+BAAsBA,EAAQC,KAA9B,MAAwCD,EAAQE,MAAvCF,EAAQG,c,GApBbC,aCAdC,E,4MAEjBT,MAAQ,CACJU,SAAS,I,uDASb,WAEIC,QAAQC,IAAI,wCACZD,QAAQC,IAAI,iO,oBAEhB,WACI,OACI,gCACI,gEAGCV,KAAKF,MAAMU,SAAW,gHAAyB,cAAC,EAAD,U,uCAjB5D,SAAgCG,GAG5B,OADAF,QAAQC,IAAI,UAAUC,GACf,CAACH,SAAUG,O,GATUL,aCefM,E,4JACjB,WACI,OAKI,aAJA,CAIC,WAAD,UACI,cAAC,EAAD,U,GARiBN,a,QCEjCO,IAASC,OACL,cAAC,IAAD,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.3cf3b0a2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Child extends Component {\r\n    state = {\r\n        // 如果后端数据传过来的数据有问题了，组件显示有问题了，错误边界就有作用了\r\n        // 子组件出错了，父组件应该正常显示，父组件出错的地方显示“网络繁忙等”\r\n        // 我们使用错误边界，需要在父组件里面动手脚，而不是在子组件里面 \r\n        // users: [\r\n        //     {id:'001',name:'tom',age: 18},\r\n        //     {id:'002',name:'jack',age: 19},\r\n        //     {id:'003',name:'peiqi',age: 20},\r\n        // ]\r\n\r\n        users: 'abc'\r\n        // 我故意写错，后端没有给你返回一个JSON数组\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>我是Child组件</h2>\r\n                {\r\n                    this.state.users.map((userObj) => {\r\n                        return <h4 key={userObj.id}>{userObj.name}---{ userObj.age}</h4>\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Child from './Child'\r\nexport default class Parent extends Component {\r\n\r\n    state = {\r\n        hasError:''  //这个状态用于标识子组件是否产生错误\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        //这个函数的意思是：如果这个Parent组件的子组件出现了任何的报错，那么都会调用这个钩子，而且调用的时候，它把错误给你传进来了\r\n        console.log('@@@@@@@',error);\r\n        return {hasError: error}\r\n    }\r\n\r\n    componentDidCatch() {\r\n        //这个也是属于生命周期钩子里的一个，但是不常见。如果组件在渲染过程中，由于子组件出现错误，则会调用这个函数\r\n        console.log('渲染组件出错');\r\n        console.log('一般我们在这里进行错误统计，然后反馈给服务器，用于通知编码人员进行Bug的解决');\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>我是Parent组件</h2>\r\n                {/* <Child/> */}\r\n                {/* 此时Child组件不要直接写了，先判断一下这个组件是否有错，如果没有才进行正常展示 */}\r\n                {this.state.hasError ? <h2>当前网络不稳定，请稍后再试</h2> : <Child />}\r\n                {/* 注意：这个错误边界只适用于生产环境！！！！！！！！！！！！！！！开发环境不能使用错误边界(最终还是会报错) */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","/*\r\n * @Author: liming\r\n * @Date: 2021-09-05 22:24:10\r\n * @LastEditTime: 2021-09-06 23:11:30\r\n * @FilePath: \\03-尚硅谷张天禹(好)\\02-代码手敲\\react_extension\\src\\App.jsx\r\n */\r\nimport React, { Component, Fragment} from 'react'\r\n// import Demo from './components/01_setState'\r\n// import Demo from './components/02_lazyload'\r\n// import Demo from './components/03_hooks'\r\n// import Demo from './components/04_Fragment'\r\n// import Demo from './components/05_Context'\r\n// import Demo from './components/06_optimize'\r\n// import Demo from './components/07_renderProps'\r\n// import Demo from './components/08_ErrorBoundary'\r\n// 这样写就写错了，你没有引到位\r\nimport Demo from './components/08_ErrorBoundary/Parent'\r\nexport default class App extends Component {\r\n    render() {\r\n        return (\r\n            // <div a='1'>\r\n            //     <Demo />\r\n            // </div>\r\n\r\n            <Fragment>\r\n                <Demo />\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","/*\r\n * @Author: liming\r\n * @Date: 2021-09-05 22:25:05\r\n * @LastEditTime: 2021-09-05 23:17:10\r\n * @FilePath: \\03-尚硅谷张天禹(好)\\02-代码手敲\\react_extension\\src\\index.js\r\n */\r\n//脚手架已经帮你安好React了\r\n\r\n//在入口文件里面的第一件事：引入React核心库\r\nimport React from 'react';\r\n\r\n//引入ReactDOM\r\nimport ReactDOM from 'react-dom';\r\n\r\n\r\nimport App from './App';\r\n\r\nimport { BrowserRouter}  from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root'))"],"sourceRoot":""}